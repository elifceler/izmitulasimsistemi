from abc import ABC, abstractmethod

class Arac(ABC):
    """
    Soyut araÃ§ sÄ±nÄ±fÄ±.
    OtobÃ¼s, Tramvay ve Taksi bu sÄ±nÄ±ftan tÃ¼retilir.
    """

    def __init__(self, yolcu):
        """
        Yolcu nesnesi alÄ±nÄ±r, artÄ±k Ã¶deme yÃ¶ntemi araÃ§ta deÄŸil yolcunun cÃ¼zdanÄ±nda saklanÄ±r.
        """
        self.yolcu = yolcu

    @abstractmethod
    def seyahat_suresi_hesapla(self, mesafe):
        """AracÄ±n belirli bir mesafeyi ne kadar sÃ¼rede gideceÄŸini hesaplar."""
        pass

    @abstractmethod
    def ucret_hesapla(self, mesafe):
        """AracÄ±n belirli bir mesafedeki Ã¼cretini hesaplar."""
        pass

    def seyahat_ve_odeme_yap(self, mesafe):
        """
        Seyahat sÃ¼resi hesaplanÄ±r, Ã¼cret belirlenir ve yolcunun cÃ¼zdanÄ± Ã¼zerinden Ã¶deme yapÄ±lÄ±r.
        """
        sure = self.seyahat_suresi_hesapla(mesafe)
        tam_ucret = self.ucret_hesapla(mesafe)
        indirimli_ucret = self.yolcu.ucret_indirimi(tam_ucret)

        # ðŸš€ Ã–deme yolcunun cÃ¼zdanÄ± Ã¼zerinden gerÃ§ekleÅŸtirilir
        odeme_sonucu = self.yolcu.cuzdan.odeme_yap(indirimli_ucret)

        return f"ðŸš— Seyahat SÃ¼resi: {sure:.2f} dakika\nðŸ’° {odeme_sonucu}"


class Otobus(Arac):
    """
    OtobÃ¼s sÄ±nÄ±fÄ±.
    """

    ORTALAMA_HIZ = 40  # km/h
    KM_BASI_UCRET = 2  # TL

    def __init__(self, yolcu):
        super().__init__(yolcu)

    def seyahat_suresi_hesapla(self, mesafe):
        """OtobÃ¼s ile tahmini sÃ¼re hesaplama (dakika cinsinden)."""
        return (mesafe / self.ORTALAMA_HIZ) * 60

    def ucret_hesapla(self, mesafe):
        """OtobÃ¼s iÃ§in mesafeye gÃ¶re Ã¼cret hesaplama."""
        return mesafe * self.KM_BASI_UCRET


class Tramvay(Arac):
    """
    Tramvay sÄ±nÄ±fÄ±.
    """

    ORTALAMA_HIZ = 50  # km/h
    KM_BASI_UCRET = 2.5  # TL

    def __init__(self, yolcu):
        super().__init__(yolcu)

    def seyahat_suresi_hesapla(self, mesafe):
        """Tramvay ile tahmini sÃ¼re hesaplama (dakika cinsinden)."""
        return (mesafe / self.ORTALAMA_HIZ) * 60

    def ucret_hesapla(self, mesafe):
        """Tramvay iÃ§in mesafeye gÃ¶re Ã¼cret hesaplama."""
        return mesafe * self.KM_BASI_UCRET


class Taksi(Arac):
    """
    Taksi sÄ±nÄ±fÄ±.
    """

    TAKSI_ACILIS_UCRETI = 10  # TL
    KM_BASI_UCRET = 4         # TL
    MIN_TAKSI_MESAFE = 3      # km

    def __init__(self, yolcu):
        super().__init__(yolcu)

    def seyahat_suresi_hesapla(self, mesafe):
        """
        Taksi ile tahmini sÃ¼re hesaplama (dakika cinsinden).
        """
        ORTALAMA_HIZ = 60  # km/h
        return (mesafe / ORTALAMA_HIZ) * 60

    # Arac sÄ±nÄ±fÄ±nÄ±n beklentisini karÅŸÄ±layan override metot (self'li)
    def ucret_hesapla(self, mesafe):
        return self.TAKSI_ACILIS_UCRETI + (mesafe * self.KM_BASI_UCRET)

    # Koordinat bazlÄ± ya da nesne oluÅŸturmadan hesaplama iÃ§in static versiyon
    @staticmethod
    def ucret_hesapla_static(mesafe):
        return Taksi.TAKSI_ACILIS_UCRETI + (mesafe * Taksi.KM_BASI_UCRET)

    @staticmethod
    def haversine_mesafe_km(enlem1, boylam1, enlem2, boylam2):
        """
        Haversine formÃ¼lÃ¼ ile iki koordinat arasÄ±ndaki mesafeyi kilometre cinsinden hesaplar.
        """
        from math import radians, sin, cos, sqrt, atan2

        R = 6371  # DÃ¼nya yarÄ±Ã§apÄ± (km)
        enlem1, boylam1, enlem2, boylam2 = map(radians, [enlem1, boylam1, enlem2, boylam2])
        d_enlem = enlem2 - enlem1
        d_boylam = boylam2 - boylam1

        a = sin(d_enlem / 2) ** 2 + cos(enlem1) * cos(enlem2) * sin(d_boylam / 2) ** 2
        c = 2 * atan2(sqrt(a), sqrt(1 - a))

        return R * c  # Mesafe (km)

    @classmethod
    def taksi_ucreti_hesapla(cls, enlem1, boylam1, enlem2, boylam2):
        """
        BaÅŸlangÄ±Ã§ ve hedef koordinatlara gÃ¶re taksi mesafesini ve toplam Ã¼cretini hesaplar.
        """
        mesafe_km = cls.haversine_mesafe_km(enlem1, boylam1, enlem2, boylam2)
        toplam_ucret = cls.TAKSI_ACILIS_UCRETI + (mesafe_km * cls.KM_BASI_UCRET)
        return mesafe_km, toplam_ucret

    @classmethod
    def taksi_gerekli_mi(cls, mesafe):
        """
        EÄŸer mesafe belirlenen eÅŸik deÄŸerinden bÃ¼yÃ¼kse taksi zorunludur.
        """
        return mesafe > cls.MIN_TAKSI_MESAFE

